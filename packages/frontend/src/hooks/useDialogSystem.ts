// 初学者向け：対話システムの管理フック
// NPCとの対話状態を管理するカスタムフックです

import { useState, useCallback } from 'react';
import {
  対話状態,
  対話データ,
  対話メッセージ,
  選択肢,
  対話データ取得,
} from '@pokemon-like-game-tutorial/shared';

/**
 * 対話システムフックの返り値の型定義
 * 初学者向け：このフックが提供する機能の一覧です
 */
interface UseDialogSystemReturn {
  /** 現在の対話状態 */
  対話状態: 対話状態;
  /** 現在表示中のメッセージ */
  現在のメッセージ?: 対話メッセージ;
  /** 現在対話中のNPC名 */
  現在のNPC名?: string;
  /** 対話を開始する関数 */
  対話開始: (NPCid: string, NPC名: string, 対話データID: string) => void;
  /** 対話を終了する関数 */
  対話終了: () => void;
  /** 次のメッセージに進む関数 */
  次のメッセージへ: () => void;
  /** 選択肢を選ぶ関数 */
  選択肢を選択: (選択肢: 選択肢) => void;
  /** タイピングエフェクトをスキップする関数 */
  タイピングスキップ: () => void;
}

/**
 * 対話システム管理フック
 * 初学者向け：NPCとの対話を管理するためのカスタムフックです
 */
export function useDialogSystem(): UseDialogSystemReturn {
  // 初学者向け：対話状態の管理
  const [対話状態, set対話状態] = useState<対話状態>({
    対話中: false,
    タイピング中: false,
    表示文字数: 0,
    会話フラグ: {},
  });

  // 現在の対話データを取得
  const [現在の対話データ, set現在の対話データ] = useState<対話データ | undefined>();
  const [現在のNPC名, set現在のNPC名] = useState<string>();

  // 現在表示中のメッセージを計算
  const 現在のメッセージ =
    現在の対話データ && 対話状態.現在のメッセージ
      ? 現在の対話データ.メッセージ[対話状態.現在のメッセージ]
      : undefined;

  /**
   * 対話開始処理
   * 初学者向け：NPCをクリックした時に呼び出される関数です
   */
  const 対話開始 = useCallback((NPCid: string, NPC名: string, 対話データID: string) => {
    // 対話データを取得
    const 対話データ = 対話データ取得(対話データID);
    if (!対話データ) {
      console.error(`対話データが見つかりません: ${対話データID}`);
      return;
    }

    // 対話状態を更新
    set対話状態((prevState) => ({
      ...prevState,
      対話中: true,
      現在のNPC: NPCid,
      現在のメッセージ: 対話データ.開始メッセージ,
      タイピング中: true,
      表示文字数: 0,
    }));

    set現在の対話データ(対話データ);
    set現在のNPC名(NPC名);
  }, []);

  /**
   * 対話終了処理
   * 初学者向け：対話を終了して通常のゲーム画面に戻る関数です
   */
  const 対話終了 = useCallback(() => {
    set対話状態((prevState) => ({
      ...prevState,
      対話中: false,
      現在のNPC: undefined,
      現在のメッセージ: undefined,
      タイピング中: false,
      表示文字数: 0,
    }));

    set現在の対話データ(undefined);
    set現在のNPC名(undefined);
  }, []);

  /**
   * 次のメッセージへ進む処理
   * 初学者向け：現在のメッセージから次のメッセージに移動する関数です
   */
  const 次のメッセージへ = useCallback(() => {
    if (!現在のメッセージ || !現在の対話データ) return;

    // 次のメッセージがある場合
    if (現在のメッセージ.次のメッセージ) {
      const 次のメッセージID = 現在のメッセージ.次のメッセージ;
      const 次のメッセージ = 現在の対話データ.メッセージ[次のメッセージID];

      if (次のメッセージ) {
        set対話状態((prevState) => ({
          ...prevState,
          現在のメッセージ: 次のメッセージID,
          タイピング中: true,
          表示文字数: 0,
        }));
      } else {
        // 次のメッセージが見つからない場合は対話終了
        対話終了();
      }
    } else {
      // 次のメッセージがない場合は対話終了
      対話終了();
    }
  }, [現在のメッセージ, 現在の対話データ, 対話終了]);

  /**
   * 選択肢選択処理
   * 初学者向け：プレイヤーが選択肢を選んだ時の処理です
   */
  const 選択肢を選択 = useCallback(
    (選択肢: 選択肢) => {
      if (!現在の対話データ) return;

      // アクションがある場合は実行（将来の機能拡張用）
      if (選択肢.アクション) {
        // TODO: アクションの実行処理を実装
        console.log(`アクション実行: ${選択肢.アクション}`);
      }

      // 次のメッセージに移動
      if (選択肢.次のメッセージ) {
        const 次のメッセージ = 現在の対話データ.メッセージ[選択肢.次のメッセージ];

        if (次のメッセージ) {
          set対話状態((prevState) => ({
            ...prevState,
            現在のメッセージ: 選択肢.次のメッセージ!,
            タイピング中: true,
            表示文字数: 0,
          }));
        } else {
          // 次のメッセージが見つからない場合は対話終了
          対話終了();
        }
      } else {
        // 次のメッセージが指定されていない場合は対話終了
        対話終了();
      }
    },
    [現在の対話データ, 対話終了]
  );

  /**
   * タイピングエフェクトスキップ処理
   * 初学者向け：タイピングエフェクトを即座に完了させる関数です
   */
  const タイピングスキップ = useCallback(() => {
    if (対話状態.タイピング中) {
      set対話状態((prevState) => ({
        ...prevState,
        タイピング中: false,
        表示文字数: 現在のメッセージ?.テキスト.length || 0,
      }));
    }
  }, [対話状態.タイピング中, 現在のメッセージ]);

  return {
    対話状態,
    現在のメッセージ,
    現在のNPC名,
    対話開始,
    対話終了,
    次のメッセージへ,
    選択肢を選択,
    タイピングスキップ,
  };
}
