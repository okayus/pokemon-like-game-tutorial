// 初学者向け：マップデータのテストファイル
// TDD（テスト駆動開発）でマップシステムの品質を保証します

import { describe, it, expect } from 'vitest';
import { 
  始まりの町, 
  北の森, 
  全マップデータ, 
  マップ取得,
  デフォルト開始マップID 
} from './mapDefinitions';
import { タイルタイプ } from '../types/map';

describe('マップデータの検証', () => {
  describe('始まりの町', () => {
    it('正しいサイズを持つ', () => {
      // 初学者向け：マップのサイズが期待通りか確認
      expect(始まりの町.幅).toBe(20);
      expect(始まりの町.高さ).toBe(15);
      expect(始まりの町.タイル.length).toBe(15); // 高さ
      expect(始まりの町.タイル[0].length).toBe(20); // 幅
    });

    it('全ての行が同じ幅を持つ', () => {
      // 初学者向け：各行の幅が統一されているか確認
      始まりの町.タイル.forEach((行) => {
        expect(行.length).toBe(20);
      });
    });

    it('境界が木で囲まれている', () => {
      // 初学者向け：マップの端が歩けない木で囲まれているか確認
      const タイル = 始まりの町.タイル;
      
      // 上端と下端
      for (let x = 0; x < 20; x++) {
        if (x !== 9 && x !== 10) { // 道以外
          expect(タイル[0][x].タイプ).toBe(タイルタイプ.木);
          expect(タイル[14][x].タイプ).toBe(タイルタイプ.木);
        }
      }
      
      // 左端と右端
      for (let y = 0; y < 15; y++) {
        if (y !== 7) { // 道以外
          expect(タイル[y][0].タイプ).toBe(タイルタイプ.木);
          expect(タイル[y][19].タイプ).toBe(タイルタイプ.木);
        }
      }
    });

    it('出口が正しく配置されている', () => {
      // 初学者向け：マップの出口が期待通りの場所にあるか確認
      expect(始まりの町.出口.length).toBe(6);
      
      // 北への出口
      const 北への出口 = 始まりの町.出口.filter(出口 => 出口.移動先マップ === "北の森");
      expect(北への出口.length).toBe(2);
      expect(北への出口[0].位置.y).toBe(0);
      expect(北への出口[1].位置.y).toBe(0);
    });

    it('道が歩行可能である', () => {
      // 初学者向け：道のタイルが歩けることを確認
      const 中央の道Y = 7;
      for (let x = 0; x < 20; x++) {
        const タイル = 始まりの町.タイル[中央の道Y][x];
        if (タイル.タイプ === タイルタイプ.道) {
          expect(タイル.歩行可能).toBe(true);
        }
      }
    });
  });

  describe('北の森', () => {
    it('正しいサイズを持つ', () => {
      expect(北の森.幅).toBe(20);
      expect(北の森.高さ).toBe(15);
    });

    it('草地でポケモンが出現する', () => {
      // 初学者向け：草むらタイルでポケモンが出現することを確認
      const 草地タイル = 北の森.タイル[5][5]; // 中央付近の草地
      expect(草地タイル.タイプ).toBe(タイルタイプ.草地);
      expect(草地タイル.草むら).toBe(true);
    });

    it('始まりの町への出口がある', () => {
      const 出口 = 北の森.出口.filter(出口 => 出口.移動先マップ === "始まりの町");
      expect(出口.length).toBeGreaterThan(0);
    });
  });

  describe('マップ取得関数', () => {
    it('存在するマップを取得できる', () => {
      // 初学者向け：マップIDでマップデータを取得できるか確認
      const マップ = マップ取得("始まりの町");
      expect(マップ).toBeDefined();
      expect(マップ?.名前).toBe("はじまりの町");
    });

    it('存在しないマップはundefinedを返す', () => {
      // 初学者向け：エラーハンドリングの確認
      const マップ = マップ取得("存在しないマップ");
      expect(マップ).toBeUndefined();
    });
  });

  describe('マップデータの整合性', () => {
    it('全てのマップの出口が有効な移動先を持つ', () => {
      // 初学者向け：マップ間の接続が正しいか確認
      Object.values(全マップデータ).forEach(マップ => {
        マップ.出口.forEach(出口 => {
          // 移動先が実装済みのマップの場合のみチェック
          const 移動先 = マップ取得(出口.移動先マップ);
          if (移動先) {
            // 移動先の座標がマップ内に収まっているか
            expect(出口.移動先位置.x).toBeGreaterThanOrEqual(0);
            expect(出口.移動先位置.x).toBeLessThan(移動先.幅);
            expect(出口.移動先位置.y).toBeGreaterThanOrEqual(0);
            expect(出口.移動先位置.y).toBeLessThan(移動先.高さ);
          }
        });
      });
    });

    it('デフォルト開始マップが存在する', () => {
      const 開始マップ = マップ取得(デフォルト開始マップID);
      expect(開始マップ).toBeDefined();
    });
  });
});